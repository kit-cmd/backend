name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      JWT_SECRET: ${{secrets.JWT_SECRET}}
  
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'zulu'

    
    - name: Build and test
      run: |
        cd DisasterInformationCollectionServer
        chmod +x gradlew
        ./gradlew clean build

        cd ../NotificationServer
        chmod +x gradlew
        ./gradlew clean build

        cd ../ShelterInfoServer
        chmod +x gradlew
        ./gradlew clean build

        cd ../UserServer
        chmod +x gradlew
        ./gradlew clean build
        

    - name: Archive production artifacts 
      uses: actions/upload-artifact@v2 
      with:
        name: compiled-application 
        path : |
          DisasterInformationCollectionServer/build/libs/*.jar 
          NotificationServer/build/libs/*.jar 
          ShelterInfoServer/build/libs/*.jar 
          UserServer/build/libs/*.jar 

  deploy:
    runs-on: ubuntu-latest

    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name : Download built application jar files from artifacts.
      uses : actions/download-artifact@v2 
      with :
        name : compiled-application 

    - run : |
        cd DisasterInformationCollectionServer/build/libs
        mv DisasterInformationCollectionServer-0.0.1-SNAPSHOT.jar disaster-info-collection-server.jar   
        cd ../../../NotificationServer/build/libs
        mv NotificationServer-0.0.1-SNAPSHOT.jar disaster-notification-server.jar   
        cd ../../../ShelterInfoServer/build/libs
        mv shelter-0.0.1-SNAPSHOT.jar disaster-shelterinfo-server.jar   
        cd ../../../UserServer/build/libs
        mv UserServer-0.0.1-SNAPSHOT.jar disaster-user-server.jar
    
    - name: Set up Docker
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker images
      run: |
        docker-compose -f docker-compose.yml build
        docker-compose -f docker-compose.yml push

    - name : SSH into EC2 and deploy   
      uses : appleboy/ssh-action@master   
      with :
        host   : ${{ secrets.EC2_HOST }}
        username   : ${{ secrets.EC2_USERNAME }}
        key : ${{ secrets.EC2_PRIVATE_KEY }}
        script :
          |
          cd backend
          docker-compose up -d
          docker-compose down
          docker-compose pull
          docker-compose up --build --force-recreate  
